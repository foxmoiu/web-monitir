//重构，1.能不能再输入的时候就获得想要获得的信息，作为原始比较的字符串
//     2.包写开


//flow : 给自己一份抄送，用数组实现多人发邮件；发现变化，有变化了才发邮件
package sendEmail;

//import javax.mail.Address;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.util.Date;
import java.util.Properties;
import java.io.IOException;

//import javax.mail.*;

//import javax.mail.internet.*;
//import java.io.UnsupportedEncodingException;
//import javax.mail.Message;
import java.io.File;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
//import java.io.BufferedReader;
//import java.io.IOException;
import java.io.InputStream;
//import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
//import java.util.*;

//import javax.activation.DataHandler;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
//import javax.mail.internet.MimeMultipart;
//import javax.mail.internet.MimeBodyPart;



//import org.jsoup.Jsoup;
//import org.jsoup.nodes.Document;
//import org.jsoup.nodes.Element;
//import org.jsoup.safety.Whitelist;

//import java.io.File;
/**
 * JavaMail 版本: 1.6.0
 * JDK 版本: JDK 1.7 以上（必须）
 */
public class SendEmail {

    // 发件人的 邮箱 和 密码（替换为自己的邮箱和密码）
    // PS: 某些邮箱服务器为了增加邮箱本身密码的安全性，给 SMTP 客户端设置了独立密码（有的邮箱称为“授权码”）, 
    //     对于开启了独立密码的邮箱, 这里的邮箱密码必需使用这个独立密码（授权码）。
    public static String myEmailAccount = "13609119670@163.com";
    public static String myEmailPassword = "53363222zZ";

    // 发件人邮箱的 SMTP 服务器地址, 必须准确, 不同邮件服务器地址不同, 一般(只是一般, 绝非绝对)格式为: smtp.xxx.com
    // 网易163邮箱的 SMTP 服务器地址为: smtp.163.com
    public static String myEmailSMTPHost = "smtp.163.com";//smtp.163.com

    // 收件人邮箱（替换为自己知道的有效邮箱）
    public static String receiveMailAccount = "1172765646@qq.com";
    public static String conservelineText = "";
    public static String detectedChangeSV = "";
   
    public static void main(String[] args) throws Exception {
    //Boolean	openFlag = false;
    Boolean initiateFlag = true;//初始化第一次读取的内容
    //int testStep = 0;
    
    while(true) {
    goonto:
    while(true) {
    	Thread.sleep(3000); 
    	//抓取网页的内容保存到电脑上
    	try {  
            //建立连接  
            //URL url = new URL("http://blog.csdn.net/HLK_1135");
   		 	File writename = new File(".\\output2333333333333.txt"); // 相对路径，如果没有则要建立一个新的output。txt文件
   		 	writename.createNewFile(); // 创建新文件
   		 	BufferedWriter out = new BufferedWriter(new FileWriter(writename));
   		 	
   		 	URL url = new URL("http://dean.xjtu.edu.cn/index.htm"); 
            HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();  
            httpUrlConn.setDoInput(true);  
            httpUrlConn.setRequestMethod("GET");  
            httpUrlConn.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)");
            //获取输入流  
            InputStream input = httpUrlConn.getInputStream();
            //将字节输入流转换为字符输入流
            InputStreamReader read = new InputStreamReader(input, "utf-8");
            //为字符输入流添加缓冲
            BufferedReader br = new BufferedReader(read);  
            // 读取返回结果  
            String data = br.readLine();
            while(data!=null)  {
            	out.write(data+"\r\n"); // \r\n即为换行      写入网页源码到文件中
                //System.out.println(data);
                data=br.readLine();
                out.flush(); // 把缓存区内容压入文件
            }  
            // 释放资源  
            br.close();  
            read.close();  
            input.close();  
            httpUrlConn.disconnect();
            out.close(); // 最后记得关闭文件
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
    		e.printStackTrace();
    	}

   	 //读取刚才抓的内容，指定部分（若有变化，则）保留变化的部分
   		try { // 防止文件建立或读取失败，用catch捕捉错误并打印，也可以throw
	   	 
			
			String pathname = ".\\output2333333333333.txt"; // 绝对路径或相对路径都可以，这里是绝对路径，写入文件时演示相对路径
			File filename = new File(pathname); // 要读取以上路径的input。txt文件
			InputStreamReader reader = new InputStreamReader(
					new FileInputStream(filename)); // 建立一个输入流对象reader
			BufferedReader br = new BufferedReader(reader); // 建立一个对象，它把文件内容转成计算机能读懂的语言
			String lineText = "";
			
			lineText = br.readLine();
			Boolean flag = true;
			stop:
			while (lineText != null && flag) {
				
				Pattern pattern=Pattern.compile("(<UL class=\"xstz_list_ul\">)");//正则表达式 匹配
				Matcher matcher= pattern.matcher(lineText);
				while(matcher.find()){
					detectedChangeSV = lineText;
					System.out.println(lineText);
					System.out.println("&&&&" + detectedChangeSV);
					flag = false;
					break  stop;
				}
				//
				lineText = br.readLine(); // 一次读入一行数据	
			}
			
			br.close();
			
			if(initiateFlag) {
				
				conservelineText = detectedChangeSV ;
				initiateFlag = false;	
			}
			
			if(detectedChangeSV.equals(conservelineText)) {
				System.out.println("@@#￥￥%……&&……%￥#…&……%￥#"+"detectedChangeSV.equals(conservelineText)"+detectedChangeSV.equals(conservelineText));
				continue;
				//break gotoon;
			}
			
			conservelineText = detectedChangeSV;
			//openFlag = true;
			
			break goonto;
			
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
   	 //下面是邮箱传输的配置
   	 
        // 1. 创建参数配置, 用于连接邮件服务器的参数配置
        Properties props = new Properties();                    // 参数配置
        props.setProperty("mail.transport.protocol", "smtp");   // 使用的协议（JavaMail规范要求）
        props.setProperty("mail.smtp.host", myEmailSMTPHost);   // 发件人的邮箱的 SMTP 服务器地址
        props.setProperty("mail.smtp.auth", "true");            // 需要请求认证

        // PS: 某些邮箱服务器要求 SMTP 连接需要使用 SSL 安全认证 (为了提高安全性, 邮箱支持SSL连接, 也可以自己开启),
        //     如果无法连接邮件服务器, 仔细查看控制台打印的 log, 如果有有类似 “连接失败, 要求 SSL 安全连接” 等错误,
        //     打开下面 /* ... */ 之间的注释代码, 开启 SSL 安全连接。
        /*
        // SMTP 服务器的端口 (非 SSL 连接的端口一般默认为 25, 可以不添加, 如果开启了 SSL 连接,
        //                  需要改为对应邮箱的 SMTP 服务器的端口, 具体可查看对应邮箱服务的帮助,
        //                  QQ邮箱的SMTP(SLL)端口为465或587, 其他邮箱自行去查看)
        final String smtpPort = "465";
        props.setProperty("mail.smtp.port", smtpPort);
        props.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        props.setProperty("mail.smtp.socketFactory.fallback", "false");
        props.setProperty("mail.smtp.socketFactory.port", smtpPort);
        */

        // 2. 根据配置创建会话对象, 用于和邮件服务器交互
        Session session = Session.getInstance(props);
        session.setDebug(true);                                 // 设置为debug模式, 可以查看详细的发送 log

        // 3. 创建一封邮件
        MimeMessage message = createMimeMessage(session, myEmailAccount, receiveMailAccount);

        // 4. 根据 Session 获取邮件传输对象
        Transport transport = session.getTransport();

        // 5. 使用 邮箱账号 和 密码 连接邮件服务器, 这里认证的邮箱必须与 message 中的发件人邮箱一致, 否则报错
        // 
        //    PS_01: 成败的判断关键在此一句, 如果连接服务器失败, 都会在控制台输出相应失败原因的 log,
        //           仔细查看失败原因, 有些邮箱服务器会返回错误码或查看错误类型的链接, 根据给出的错误
        //           类型到对应邮件服务器的帮助网站上查看具体失败原因。
        //
        //    PS_02: 连接失败的原因通常为以下几点, 仔细检查代码:
        //           (1) 邮箱没有开启 SMTP 服务;
        //           (2) 邮箱密码错误, 例如某些邮箱开启了独立密码;
        //           (3) 邮箱服务器要求必须要使用 SSL 安全连接;
        //           (4) 请求过于频繁或其他原因, 被邮件服务器拒绝服务;
        //           (5) 如果以上几点都确定无误, 到邮件服务器网站查找帮助。
        //
        //    PS_03: 仔细看log, 认真看log, 看懂log, 错误原因都在log已说明。
        transport.connect(myEmailAccount, myEmailPassword);

        // 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人
        transport.sendMessage(message, message.getAllRecipients());

        // 7. 关闭连接
        transport.close();
    }
    }
    /**
     * 创建一封只包含文本的简单邮件
     *
     * @param session 和服务器交互的会话
     * @param sendMail 发件人邮箱
     * @param receiveMail 收件人邮箱
     * @return
     * @throws Exception
     */
    
    public static MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail) throws Exception {
        // 1. 创建一封邮件
        MimeMessage message = new MimeMessage(session);

        // 2. From: 发件人（昵称有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改昵称）
        message.setFrom(new InternetAddress(sendMail, "mmpmmp", "UTF-8"));
        

        // 3. To: 收件人（可以增加多个收件人、抄送、密送）
        /**
        * 设置收件人地址（可以增加多个收件人、抄送、密送），即下面这一行代码书写多行
        * MimeMessage.RecipientType.TO:发送
        * MimeMessage.RecipientType.CC：抄送
        * MimeMessage.RecipientType.BCC：密送
        */
        message.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(receiveMail, "hhy", "UTF-8"));
        message.setRecipient(MimeMessage.RecipientType.CC, new InternetAddress(myEmailAccount, "hhy", "UTF-8"));//给自己一个抄送，以免出现  554 DT:SPM smtp12
        
        // 4. Subject: 邮件主题（标题有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改标题）
        message.setSubject("测试", "UTF-8");

        // 5. Content: 邮件正文（可以使用html标签）（内容有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改发送内容）
        //String a = new String(conservelineText);
        message.setContent(conservelineText, "text/html;charset=UTF-8");
//        System.out.println("mmp"+conservelineText+"mmp");
        // 6. 设置发件时间
        message.setSentDate(new Date());

        // 7. 保存设置
        message.saveChanges();

        return message;
    
    }

}
